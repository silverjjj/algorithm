# 비트 연산자
a = 10
# .. 0001010에서
# a << 1로 하면 비트 연산자가 왼쪽으로 1씩 이동한다.
#  ...0010100 그래서 20이 된다. 다시말해서 * 2한 결과가 된다.
print(a << 1)      # 10 * 2^1
print(a << 2)      # 10 * 2^2
#print(a << n)      # 10 * 2^n

# 반대로 >> 오른쪽으로 이동하면
print(a >> 1)       # 10 / 2^1


if 6 & 1:       # 비트연산자인 &을 활용하면 마지막 비트가 1이면 홀수고 0이면 짝수이다.
    print('홀수')
else:
    print('짝수')

print(0^1)
print(1^1)

# 보다 간결하게 부분집합을 생성하는 방법
arr = [3,6,7,1,5,4]
n = len(arr)
cnt = 0
for i in range(1<<n):   #2^6개 -> i : 0~63
    for j in range(n+1): # j 는 0~6
        if i & (1<<j):      # 0~63 &
            print(arr[j], end = ", ")
    print("mmm")
    print()
print()